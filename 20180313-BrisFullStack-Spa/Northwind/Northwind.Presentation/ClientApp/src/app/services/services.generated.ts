/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.4.0 (NJsonSchema v9.10.29.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpResponseBase, HttpErrorResponse } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CustomersService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    getCustomers(): Observable<ActionResultOfIEnumerableOfCustomerListModel | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetCustomers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomers(<any>response_);
                } catch (e) {
                    return <Observable<ActionResultOfIEnumerableOfCustomerListModel | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<ActionResultOfIEnumerableOfCustomerListModel | null>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomers(response: HttpResponseBase): Observable<ActionResultOfIEnumerableOfCustomerListModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ActionResultOfIEnumerableOfCustomerListModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<ActionResultOfIEnumerableOfCustomerListModel | null>(<any>null);
    }

    postCustomer(customerId: string | null | undefined, address: string | null | undefined, city: string | null | undefined, companyName: string | null, contactName: string | null | undefined, contactTitle: string | null | undefined, country: string | null | undefined, fax: string | null | undefined, phone: string | null | undefined, postalCode: string | null | undefined, region: string | null | undefined): Observable<ActionResultOfCreateCustomerModel | null> {
        let url_ = this.baseUrl + "/api/Customers?";
        if (customerId !== undefined)
            url_ += "customerId=" + encodeURIComponent("" + customerId) + "&"; 
        if (address !== undefined)
            url_ += "address=" + encodeURIComponent("" + address) + "&"; 
        if (city !== undefined)
            url_ += "city=" + encodeURIComponent("" + city) + "&"; 
        if (companyName === undefined)
            throw new Error("The parameter 'companyName' must be defined.");
        else
            url_ += "companyName=" + encodeURIComponent("" + companyName) + "&"; 
        if (contactName !== undefined)
            url_ += "contactName=" + encodeURIComponent("" + contactName) + "&"; 
        if (contactTitle !== undefined)
            url_ += "contactTitle=" + encodeURIComponent("" + contactTitle) + "&"; 
        if (country !== undefined)
            url_ += "country=" + encodeURIComponent("" + country) + "&"; 
        if (fax !== undefined)
            url_ += "fax=" + encodeURIComponent("" + fax) + "&"; 
        if (phone !== undefined)
            url_ += "phone=" + encodeURIComponent("" + phone) + "&"; 
        if (postalCode !== undefined)
            url_ += "postalCode=" + encodeURIComponent("" + postalCode) + "&"; 
        if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processPostCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostCustomer(<any>response_);
                } catch (e) {
                    return <Observable<ActionResultOfCreateCustomerModel | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<ActionResultOfCreateCustomerModel | null>><any>Observable.throw(response_);
        });
    }

    protected processPostCustomer(response: HttpResponseBase): Observable<ActionResultOfCreateCustomerModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ActionResultOfCreateCustomerModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<ActionResultOfCreateCustomerModel | null>(<any>null);
    }

    getCustomer(id: string): Observable<ActionResultOfCustomerDetailModel | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomer(<any>response_);
                } catch (e) {
                    return <Observable<ActionResultOfCustomerDetailModel | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<ActionResultOfCustomerDetailModel | null>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomer(response: HttpResponseBase): Observable<ActionResultOfCustomerDetailModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ActionResultOfCustomerDetailModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<ActionResultOfCustomerDetailModel | null>(<any>null);
    }

    putCustomer(id: string, customerId: string | null | undefined, address: string | null | undefined, city: string | null | undefined, companyName: string | null, contactName: string | null | undefined, contactTitle: string | null | undefined, country: string | null | undefined, fax: string | null | undefined, phone: string | null | undefined, postalCode: string | null | undefined, region: string | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (customerId !== undefined)
            url_ += "customerId=" + encodeURIComponent("" + customerId) + "&"; 
        if (address !== undefined)
            url_ += "address=" + encodeURIComponent("" + address) + "&"; 
        if (city !== undefined)
            url_ += "city=" + encodeURIComponent("" + city) + "&"; 
        if (companyName === undefined)
            throw new Error("The parameter 'companyName' must be defined.");
        else
            url_ += "companyName=" + encodeURIComponent("" + companyName) + "&"; 
        if (contactName !== undefined)
            url_ += "contactName=" + encodeURIComponent("" + contactName) + "&"; 
        if (contactTitle !== undefined)
            url_ += "contactTitle=" + encodeURIComponent("" + contactTitle) + "&"; 
        if (country !== undefined)
            url_ += "country=" + encodeURIComponent("" + country) + "&"; 
        if (fax !== undefined)
            url_ += "fax=" + encodeURIComponent("" + fax) + "&"; 
        if (phone !== undefined)
            url_ += "phone=" + encodeURIComponent("" + phone) + "&"; 
        if (postalCode !== undefined)
            url_ += "postalCode=" + encodeURIComponent("" + postalCode) + "&"; 
        if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processPutCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutCustomer(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileResponse | null>><any>Observable.throw(response_);
        });
    }

    protected processPutCustomer(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Observable.of({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<FileResponse | null>(<any>null);
    }

    deleteCustomer(id: string): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processDeleteCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCustomer(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileResponse | null>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCustomer(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Observable.of({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class SampleDataService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    weatherForecasts(): Observable<WeatherForecast[] | null> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processWeatherForecasts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecasts(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[] | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<WeatherForecast[] | null>><any>Observable.throw(response_);
        });
    }

    protected processWeatherForecasts(response: HttpResponseBase): Observable<WeatherForecast[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WeatherForecast.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<WeatherForecast[] | null>(<any>null);
    }
}

export class ActionResultOfIEnumerableOfCustomerListModel implements IActionResultOfIEnumerableOfCustomerListModel {
    result?: any | undefined;
    value?: CustomerListModel[] | undefined;

    constructor(data?: IActionResultOfIEnumerableOfCustomerListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"];
            if (data["value"] && data["value"].constructor === Array) {
                this.value = [];
                for (let item of data["value"])
                    this.value.push(CustomerListModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ActionResultOfIEnumerableOfCustomerListModel {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResultOfIEnumerableOfCustomerListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        if (this.value && this.value.constructor === Array) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IActionResultOfIEnumerableOfCustomerListModel {
    result?: any | undefined;
    value?: CustomerListModel[] | undefined;
}

export class CustomerListModel implements ICustomerListModel {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICustomerListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CustomerListModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICustomerListModel {
    id?: string | undefined;
    name?: string | undefined;
}

export class ActionResultOfCustomerDetailModel implements IActionResultOfCustomerDetailModel {
    result?: any | undefined;
    value?: CustomerDetailModel | undefined;

    constructor(data?: IActionResultOfCustomerDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"];
            this.value = data["value"] ? CustomerDetailModel.fromJS(data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ActionResultOfCustomerDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResultOfCustomerDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IActionResultOfCustomerDetailModel {
    result?: any | undefined;
    value?: CustomerDetailModel | undefined;
}

export class CustomerDetailModel implements ICustomerDetailModel {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: ICustomerDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CustomerDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface ICustomerDetailModel {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class ActionResultOfCreateCustomerModel implements IActionResultOfCreateCustomerModel {
    result?: any | undefined;
    value?: CreateCustomerModel | undefined;

    constructor(data?: IActionResultOfCreateCustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"];
            this.value = data["value"] ? CreateCustomerModel.fromJS(data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ActionResultOfCreateCustomerModel {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResultOfCreateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IActionResultOfCreateCustomerModel {
    result?: any | undefined;
    value?: CreateCustomerModel | undefined;
}

export class CreateCustomerModel implements ICreateCustomerModel {
    customerId?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName!: string;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: ICreateCustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CreateCustomerModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface ICreateCustomerModel {
    customerId?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName: string;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC!: number;
    summary?: string | undefined;
    temperatureF!: number;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data; 
    }
}

export interface IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC: number;
    summary?: string | undefined;
    temperatureF: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}